1. Підготовка до розробки
1.1. Збір та аналіз вимог:

Ознайомлення з ТЗ.
Визначення основного функціоналу та ключових пріоритетів.
1.2. Налаштування середовища розробки:

Встановлення Python, PyQt5, SQLite3, та Qt Designer.
Ініціалізація Git-репозиторію для контролю версій.
1.3. Створення структури проєкту:

bash
Копіювати
Редагувати
/task_manager
├── main.py
├── ui/
├── controllers/
├── models/
├── resources/
├── utils/
└── tests/
2. Розробка графічного інтерфейсу (View)
2.1. Створення макету інтерфейсу в Qt Designer:

Головне вікно з таблицею для відображення задач.
Додаткові діалогові вікна для створення/редагування задач.
Елементи фільтрації та сортування.
Прогрес-бар для візуалізації прогресу виконання задач.
2.2. Збереження інтерфейсу в файли .ui (наприклад, main_window.ui).

2.3. Конвертація .ui в Python-код:

bash
Копіювати
Редагувати
pyuic5 ui/main_window.ui -o ui/main_window_ui.py
3. Розробка бази даних (Model)
3.1. Створення бази даних SQLite:

Таблиця tasks зі стовпцями:
id (INTEGER, PRIMARY KEY).
title (TEXT).
description (TEXT).
deadline (DATETIME).
priority (INTEGER).
status (BOOLEAN).
3.2. Реалізація модуля для роботи з базою даних (models/database.py):

Методи для:
Додавання задач.
Отримання списку задач.
Оновлення задач.
Видалення задач.
4. Розробка логіки додатку (Controller)
4.1. Головний контролер (controllers/main_controller.py):

Підключення графічного інтерфейсу до бази даних.
Завантаження задач у таблицю.
Обробка подій від кнопок (створення, редагування, видалення).
4.2. Контролер для створення/редагування задач (controllers/task_controller.py):

Відкриття діалогового вікна для введення даних.
Перевірка коректності введення (валидація).
Передача даних у базу.
4.3. Функції фільтрації та сортування (utils/filters.py):

Реалізація логіки сортування та фільтрації задач.
Оновлення відображення списку задач після застосування фільтрів.
5. Реалізація нагадувань
5.1. Створення модуля для обробки нагадувань (utils/notifications.py):

Перевірка дедлайнів у задачах.
Генерація локального повідомлення за допомогою QSystemTrayIcon.
5.2. Налаштування таймера (QTimer) для періодичної перевірки задач.

6. Реалізація експорту задач
6.1. Додати функцію експорту задач у форматі CSV (utils/export.py):

Використання бібліотеки csv.
Додавання кнопки "Експорт" в головному вікні.
7. Робота над дизайном
7.1. Створення тем для інтерфейсу (світла/темна тема):

Окремі файли стилів CSS для тем.
Реалізація функції перемикання тем через меню.
8. Тестування
8.1. Написання юніт-тестів для перевірки:

Роботи з базою даних.
Функцій фільтрації, сортування та нагадувань.
8.2. Ручне тестування:

Перевірка всіх функцій через GUI.
Тестування на різних операційних системах.
9. Оптимізація
9.1. Оптимізація запитів до бази даних.
9.2. Поліпшення продуктивності для роботи з великим списком задач.

10. Документація та деплой
10.1. Написання README.md з інструкціями щодо встановлення, запуску та користування додатком.
10.2. Створення інсталяційного файлу за допомогою PyInstaller:

bash
Копіювати
Редагувати
pyinstaller --onefile --windowed main.py